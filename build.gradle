plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'org.jreleaser' version '1.13.1'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

fabricApi {
    configureDataGeneration()
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "lmgtelec" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url "https://jitpack.io" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withJavadocJar()
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}



// configure the maven publication
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'io.github.lazygamer1111'
            artifactId = archives_base_name

            from components.java

            pom {
                name = "matLib"
                description = "Lazy's modern gregtech"
                url = "github.com/LazyGamer1111/MaterialsLib"
                inceptionYear = '2024'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'LazyGamer1111'
                        name = 'Lazy'
                    }
                }
                scm {
                    connection = 'scm:git://' + url + ".git"
                    developerConnection = 'scm:git:ssh://' + url + ".git"
                    url = 'https://' + url + ".git"
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }

}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
        files = true
        artifacts = true
    }
    deploy {
        maven {
            pomchecker {
                // Defines the tool version to use.
                //
                version = '1.11.0'

                // Fail the release if pomchecker outputs a warning.
                // Defaults to `true`.
                //
                failOnWarning = false

                // Fail the release if pomchecker outputs an error.
                // Defaults to `true`.
                //
                failOnError = false
            }

            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    snapshotSupported = false
                    sign = true
                    applyMavenCentralRules = true
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}

